---
description: 数据存储与API交互规范
---

# 数据存储与API规范 

## 本地数据存储

### 1. uni-app存储方案

- 轻量级数据：使用`uni.setStorage`/`uni.getStorage`
- 复杂数据：使用本地SQLite数据库
- 缓存策略：关键数据本地持久化，非关键数据使用内存缓存

```js
// 存储示例
function saveUserPreferences(prefs) {
  try {
    uni.setStorageSync('USER_PREFERENCES', prefs);
  } catch (e) {
    console.error('保存用户偏好设置失败', e);
  }
}

// 读取示例
function getUserPreferences() {
  try {
    return uni.getStorageSync('USER_PREFERENCES') || defaultPreferences;
  } catch (e) {
    console.error('获取用户偏好设置失败', e);
    return defaultPreferences;
  }
}
```

## 状态管理

### 1. Vuex模块划分

- 按功能模块拆分store
- 训练数据模块（training）
- 用户数据模块（user）
- 饮食数据模块（diet）
- 全局UI状态模块（ui）

```js
// store/index.js
import Vue from 'vue';
import Vuex from 'vuex';
import training from './modules/training';
import user from './modules/user';
import diet from './modules/diet';
import ui from './modules/ui';

Vue.use(Vuex);

export default new Vuex.Store({
  modules: {
    training,
    user,
    diet,
    ui
  }
});
```

## API交互

### 1. 请求封装

- 使用`uni.request`统一封装API请求
- 实现请求拦截器和响应拦截器
- 统一处理错误和加载状态

```js
// api/request.js
const baseURL = 'https://api.fitness-app.com/v1';

export default {
  request(options) {
    return new Promise((resolve, reject) => {
      uni.request({
        url: baseURL + options.url,
        method: options.method || 'GET',
        data: options.data,
        header: {
          'Content-Type': 'application/json',
          'Authorization': uni.getStorageSync('TOKEN') || ''
        },
        success: (res) => {
          if (res.statusCode === 200) {
            resolve(res.data);
          } else if (res.statusCode === 401) {
            // 处理未授权
            uni.navigateTo({ url: '/pages/login/login' });
            reject(new Error('未授权，请重新登录'));
          } else {
            reject(new Error(res.data.message || '请求失败'));
          }
        },
        fail: (err) => {
          uni.showToast({
            title: '网络错误，请稍后重试',
            icon: 'none'
          });
          reject(err);
        }
      });
    });
  }
};
```

### 2. 数据模型

为每个业务实体定义清晰的数据模型，例如：

```js
// models/Training.js
export default class Training {
  constructor(data = {}) {
    this.id = data.id || '';
    this.name = data.name || '新训练计划';
    this.type = data.type || '力量训练';
    this.exercises = data.exercises || [];
    this.duration = data.duration || 0;
    this.createdAt = data.createdAt || new Date();
  }
  
  // 计算属性和方法
  get totalCalories() {
    return this.exercises.reduce((sum, exercise) => sum + exercise.calories, 0);
  }
}
```
