<template>
	<view class="container">
		<!-- 页面头部 -->
		<view class="header">
			<view class="header-left">
				<text class="timer">00:00</text>
				<view class="training-name">
					<text class="training-title">{{ trainingData.title }}</text>
					<text class="training-name-edit" @click="editTrainingName">✏️</text>
				</view>
			</view>
			
			<view class="header-right">
				<view class="action-button" @click="completeTraining">
					<text class="action-button-text">完成</text>
				</view>
				<view class="stats">
					<text class="stats-text"><text class="stats-highlight">{{ completedSets }}</text>/<text class="stats-highlight">{{ totalSets }}</text> 组</text>
					<text class="stats-text"><text class="stats-highlight">{{ totalVolume }}</text> kg 容量</text>
				</view>
			</view>
		</view>
		
		<!-- 运动列表 -->
		<list class="exercise-list" show-scrollbar="false">
			<cell v-for="(exercise, exerciseIndex) in trainingData.exercises" :key="exercise.id">
				<view class="exercise-card" :class="{ 'collapsed': exercise.collapsed }">
					<!-- 运动标题栏 -->
					<view class="exercise-header" @click="toggleExerciseCollapse(exerciseIndex)">
						<view class="exercise-name-wrapper">
							<text class="exercise-name">{{ exercise.name }}</text>
							
							<!-- 折叠状态下显示进度 -->
							<view class="exercise-progress" v-if="exercise.collapsed">
								<text class="exercise-sets-count">{{ exercise.sets.length }}组</text>
								<view class="exercise-dots">
									<view 
										v-for="(set, dotIndex) in exercise.sets" 
										:key="'dot-'+dotIndex" 
										class="dot"
										:class="{ 'completed': set.completed }"
									></view>
								</view>
							</view>
						</view>
						
						<view class="exercise-actions">
							<view class="icon-button" @click.stop="showExerciseNotes(exerciseIndex)">
								<text class="icon">📝</text>
							</view>
							<view class="icon-button" @click.stop="showExerciseMenu(exerciseIndex)">
								<text class="icon">⋯</text>
							</view>
						</view>
					</view>
					
					<!-- 运动详情内容 -->
					<view class="collapsible-content">
						<!-- 组数列表 -->
						<view class="set-list">
							<view class="set-list-header">
								<text class="set-list-title">组数信息</text>
								<view class="unit-toggle">
									<view 
										class="unit-toggle-btn" 
										:class="{ 'active': exercise.weightUnit === 'kg' }"
										@click="changeWeightUnit(exerciseIndex, 'kg')"
									>
										<text class="unit-text" :class="{ 'active-text': exercise.weightUnit === 'kg' }">KG</text>
									</view>
									<view 
										class="unit-toggle-btn"
										:class="{ 'active': exercise.weightUnit === 'lbs' }"
										@click="changeWeightUnit(exerciseIndex, 'lbs')"
									>
										<text class="unit-text" :class="{ 'active-text': exercise.weightUnit === 'lbs' }">LBS</text>
									</view>
								</view>
							</view>
							
							<!-- 组数表头 -->
							<view class="set-row set-header">
								<text class="set-header-text set-number-col">组数</text>
								<text class="set-header-text set-weight-col">
									重量({{ exercise.weightUnit }})
								</text>
								<text class="set-header-text set-reps-col">次数</text>
								<text class="set-header-text set-complete-col">完成</text>
								<text class="set-header-text set-actions-col"></text>
							</view>
							
							<!-- 组数列表 -->
							<view 
								class="set-row" 
								v-for="(set, setIndex) in exercise.sets"
								:key="'set-'+exerciseIndex+'-'+setIndex"
							>
								<text class="set-number-col">{{ setIndex + 1 }}</text>
								<view class="set-weight-col">
									<input 
										class="set-input" 
										type="number" 
										v-model="set.weight" 
										@change="calculateVolume"
									/>
								</view>
								<view class="set-reps-col">
									<input 
										class="set-input" 
										type="number" 
										v-model="set.reps" 
										@change="calculateVolume"
									/>
								</view>
								<view class="set-complete-col" @click="toggleSetComplete(exerciseIndex, setIndex)">
									<view class="custom-checkbox">
										<view class="checkbox-inner" v-if="set.completed">
											<text class="checkbox-icon">✓</text>
										</view>
									</view>
								</view>
								<view class="set-actions-col">
									<view class="set-actions-btn" @click="showSetMenu(exerciseIndex, setIndex)">
										<text class="icon">⋯</text>
									</view>
								</view>
							</view>
							
							<!-- 添加组数按钮 -->
							<view class="add-set" @click="addSet(exerciseIndex)">
								<text class="add-set-text">+ 添加组数</text>
							</view>
						</view>
						
						<!-- 备注信息 -->
						<view class="exercise-notes" v-if="exercise.notes">
							<text class="notes-text">{{ exercise.notes }}</text>
						</view>
					</view>
				</view>
			</cell>
			
			<!-- 添加动作按钮 -->
			<cell>
				<view class="add-exercise" @click="showAddExerciseModal">
					<text class="add-exercise-text">+ 添加动作</text>
				</view>
			</cell>
		</list>
		
		<!-- 底部导航 -->
		<view class="bottom-nav">
			<view class="bottom-nav-btn" @click="minimizeSession">
				<text class="bottom-icon">⬇️</text>
				<text class="bottom-text">最小化</text>
			</view>
			<view class="bottom-nav-btn" @click="showAddExerciseModal">
				<text class="bottom-icon">➕</text>
				<text class="bottom-text">添加动作</text>
			</view>
			<view class="bottom-nav-btn delete" @click="showDeleteConfirm">
				<text class="bottom-icon">🗑️</text>
				<text class="bottom-text">删除训练</text>
			</view>
			<view class="bottom-nav-btn save" @click="saveAndExit">
				<text class="bottom-icon">💾</text>
				<text class="bottom-text">保存返回</text>
			</view>
		</view>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				// 训练会话数据
				trainingData: {
					id: null,
					title: "70% 腿训",
					startTime: Date.now(),
					totalTime: 0,
					exercises: [
						{
							id: 1,
							name: "深蹲",
							collapsed: false,
							weightUnit: 'kg',
							notes: "保持脚尖微微朝外，每组之间休息90秒",
							sets: [
								{ weight: 50, reps: 10, completed: true },
								{ weight: 55, reps: 8, completed: true },
								{ weight: 60, reps: 6, completed: false }
							]
						},
						{
							id: 2,
							name: "腿举",
							collapsed: false,
							weightUnit: 'kg',
							notes: "注意脚的位置，不要锁膝",
							sets: [
								{ weight: 100, reps: 12, completed: true },
								{ weight: 110, reps: 10, completed: true },
								{ weight: 120, reps: 8, completed: false }
							]
						},
						{
							id: 3,
							name: "腿弯举",
							collapsed: false,
							weightUnit: 'kg',
							notes: "",
							sets: [
								{ weight: 40, reps: 12, completed: true },
								{ weight: 45, reps: 10, completed: true },
								{ weight: 50, reps: 8, completed: false },
								{ weight: 55, reps: 8, completed: false }
							]
						}
					]
				},
				// 总重量
				totalVolume: 0,
				// 是否显示组数菜单
				activeSetMenu: {
					exerciseIndex: -1,
					setIndex: -1
				}
			}
		},
		
		computed: {
			// 计算已完成组数
			completedSets() {
				let count = 0;
				this.trainingData.exercises.forEach(exercise => {
					exercise.sets.forEach(set => {
						if (set.completed) count++;
					});
				});
				return count;
			},
			
			// 计算总组数
			totalSets() {
				let count = 0;
				this.trainingData.exercises.forEach(exercise => {
					count += exercise.sets.length;
				});
				return count;
			}
		},
		
		onLoad(options) {
			// 如果有传入训练ID，则加载该训练
			if (options.id) {
				this.loadTraining(options.id);
			}
			
			// 初始计算总重量
			this.$nextTick(() => {
				this.calculateVolume();
				console.log('初始化计算完成：', this.totalVolume, this.completedSets, this.totalSets);
			});
		},
		
		onReady() {
			// 页面加载完成后执行
		},
		
		onUnload() {
			// 页面卸载时执行
		},
		
		methods: {
			// 计算总重量
			calculateVolume() {
				let volume = 0;
				this.trainingData.exercises.forEach(exercise => {
					exercise.sets.forEach(set => {
						// 只计算已完成的组
						if (set.completed) {
							let weight = parseFloat(set.weight) || 0;
							let reps = parseInt(set.reps) || 0;
							
							// 如果是磅，转换为公斤
							if (exercise.weightUnit === 'lbs') {
								weight = weight * 0.453592;
							}
							
							volume += weight * reps;
						}
					});
				});
				
				// 取整
				this.totalVolume = Math.round(volume);
			},
			
			// 切换运动折叠状态
			toggleExerciseCollapse(index) {
				this.trainingData.exercises[index].collapsed = !this.trainingData.exercises[index].collapsed;
			},
			
			// 切换重量单位
			changeWeightUnit(exerciseIndex, unit) {
				const exercise = this.trainingData.exercises[exerciseIndex];
				
				// 如果已经是同一单位，不做改变
				if (exercise.weightUnit === unit) return;
				
				// 转换每组的重量
				exercise.sets.forEach(set => {
					let weight = parseFloat(set.weight) || 0;
					
					if (unit === 'kg' && exercise.weightUnit === 'lbs') {
						// 磅转公斤
						set.weight = Math.round(weight * 0.453592);
					} else if (unit === 'lbs' && exercise.weightUnit === 'kg') {
						// 公斤转磅
						set.weight = Math.round(weight * 2.20462);
					}
				});
				
				// 更新单位
				exercise.weightUnit = unit;
				
				// 重新计算总重量
				this.calculateVolume();
			},
			
			// 切换组完成状态
			toggleSetComplete(exerciseIndex, setIndex) {
				const set = this.trainingData.exercises[exerciseIndex].sets[setIndex];
				set.completed = !set.completed;
				
				// 更新总重量
				this.$nextTick(() => {
					this.calculateVolume();
				});
			},
			
			// 添加新的组
			addSet(exerciseIndex) {
				const exercise = this.trainingData.exercises[exerciseIndex];
				const lastSet = exercise.sets[exercise.sets.length - 1];
				
				// 复制上一组的数据作为默认值
				const newSet = {
					weight: lastSet ? lastSet.weight : 0,
					reps: lastSet ? lastSet.reps : 0,
					completed: false
				};
				
				exercise.sets.push(newSet);
			},
			
			// 显示组操作菜单
			showSetMenu(exerciseIndex, setIndex) {
				// 实际中可能需要显示弹窗或操作菜单
				uni.showActionSheet({
					itemList: ['开始休息计时', '复制本组', '删除'],
					success: (res) => {
						const index = res.tapIndex;
						
						switch (index) {
							case 0: // 开始休息计时
								uni.showToast({
									title: '休息计时功能待实现',
									icon: 'none'
								});
								break;
							case 1: // 复制本组
								this.duplicateSet(exerciseIndex, setIndex);
								break;
							case 2: // 删除
								this.deleteSet(exerciseIndex, setIndex);
								break;
						}
					}
				});
			},
			
			// 复制组
			duplicateSet(exerciseIndex, setIndex) {
				const exercise = this.trainingData.exercises[exerciseIndex];
				const setToCopy = exercise.sets[setIndex];
				
				// 创建副本
				const newSet = {
					weight: setToCopy.weight,
					reps: setToCopy.reps,
					completed: false
				};
				
				// 插入到当前组后面
				exercise.sets.splice(setIndex + 1, 0, newSet);
			},
			
			// 删除组
			deleteSet(exerciseIndex, setIndex) {
				const exercise = this.trainingData.exercises[exerciseIndex];
				
				// 确保至少有一个组
				if (exercise.sets.length > 1) {
					exercise.sets.splice(setIndex, 1);
					
					// 更新总重量
					this.calculateVolume();
				} else {
					uni.showToast({
						title: '至少保留一个组',
						icon: 'none'
					});
				}
			},
			
			// 显示动作备注
			showExerciseNotes(exerciseIndex) {
				const exercise = this.trainingData.exercises[exerciseIndex];
				
				// 显示/编辑备注的弹窗
				uni.showModal({
					title: '动作备注',
					editable: true,
					placeholderText: '输入备注信息',
					content: exercise.notes || '',
					success: (res) => {
						if (res.confirm) {
							exercise.notes = res.content;
						}
					}
				});
			},
			
			// 显示动作菜单
			showExerciseMenu(exerciseIndex) {
				uni.showActionSheet({
					itemList: ['调整顺序', '删除动作'],
					success: (res) => {
						const index = res.tapIndex;
						
						switch (index) {
							case 0: // 调整顺序
								this.showReorderModal();
								break;
							case 1: // 删除动作
								this.deleteExercise(exerciseIndex);
								break;
						}
					}
				});
			},
			
			// 删除动作
			deleteExercise(exerciseIndex) {
				uni.showModal({
					title: '确认删除',
					content: '确定要删除这个动作吗？',
					success: (res) => {
						if (res.confirm) {
							this.trainingData.exercises.splice(exerciseIndex, 1);
							
							// 更新总重量
							this.calculateVolume();
						}
					}
				});
			},
			
			// 编辑训练名称
			editTrainingName() {
				uni.showModal({
					title: '编辑训练名称',
					editable: true,
					content: this.trainingData.title,
					success: (res) => {
						if (res.confirm && res.content) {
							this.trainingData.title = res.content;
						}
					}
				});
			},
			
			// 显示添加动作模态框
			showAddExerciseModal() {
				// 实际项目中可能需要导航到选择动作页面
				uni.showToast({
					title: '此功能将打开动作选择页面',
					icon: 'none'
				});
			},
			
			// 显示排序模态框
			showReorderModal() {
				uni.showToast({
					title: '排序功能待实现',
					icon: 'none'
				});
			},
			
			// 最小化会话
			minimizeSession() {
				// 待实现最小化功能
				uni.showToast({
					title: '最小化功能待实现',
					icon: 'none'
				});
			},
			
			// 完成训练
			completeTraining() {
				// 保存训练记录
				this.saveTrainingRecord();
				
				// 返回上一页
				uni.navigateBack();
			},
			
			// 保存并退出
			saveAndExit() {
				// 保存训练记录
				this.saveTrainingRecord();
				
				// 返回上一页
				uni.navigateBack();
			},
			
			// 保存训练记录
			saveTrainingRecord() {
				// 在实际项目中，这里应该将数据保存到本地或发送到服务器
				uni.showToast({
					title: '训练记录已保存',
					icon: 'success'
				});
				
				console.log('保存的训练数据:', JSON.stringify(this.trainingData));
			},
			
			// 显示删除确认
			showDeleteConfirm() {
				uni.showModal({
					title: '确认删除',
					content: '确定要删除这次训练记录吗？所有数据将丢失。',
					success: (res) => {
						if (res.confirm) {
							// 在实际项目中，这里应该删除相关数据
							uni.navigateBack();
						}
					}
				});
			},
			
			// 加载训练数据
			loadTraining(id) {
				// 实际项目中，这里应该从本地或服务器获取训练数据
				console.log('加载训练ID:', id);
			}
		}
	}
</script>

<style>
	.container {
		flex: 1;
		background-color: #f5f5f5;
		position: relative;
	}
	
	/* 头部样式 */
	.header {
		flex-direction: row;
		justify-content: space-between;
		padding: 30rpx;
		background-color: #ffffff;
		border-bottom-width: 1px;
		border-bottom-color: #eeeeee;
	}
	
	.header-left {
		flex-direction: column;
		flex: 1;
	}
	
	.timer {
		font-size: 56rpx;
		font-weight: bold;
		margin-bottom: 6rpx;
	}
	
	.training-name {
		flex-direction: row;
		align-items: center;
	}
	
	.training-title {
		font-size: 38rpx;
		font-weight: bold;
		color: #666666;
	}
	
	.training-name-edit {
		margin-left: 16rpx;
		color: #999999;
		font-size: 32rpx;
	}
	
	.header-right {
		flex-direction: column;
		align-items: flex-end;
		justify-content: center;
		padding-left: 20rpx;
	}
	
	.action-button {
		background-color: #0A84FF;
		padding: 16rpx 32rpx;
		border-radius: 12rpx;
		margin-bottom: 12rpx;
		align-items: center;
	}
	
	.action-button-text {
		color: white;
		font-weight: bold;
		font-size: 32rpx;
	}
	
	.stats {
		flex-direction: column;
		align-items: flex-end;
	}
	
	.stats-text {
		font-size: 28rpx;
		color: #666666;
		margin-bottom: 4rpx;
		text-align: right;
	}
	
	.stats-highlight {
		color: #333333;
		font-weight: bold;
	}
	
	/* 运动列表 */
	.exercise-list {
		flex: 1;
		padding: 20rpx;
	}
	
	/* 运动卡片 */
	.exercise-card {
		background-color: #ffffff;
		border-radius: 20rpx;
		margin-bottom: 30rpx;
		padding: 24rpx 20rpx;
		box-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.05);
	}
	
	/* 运动标题 */
	.exercise-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20rpx;
		padding: 0 10rpx;
	}
	
	.exercise-name-wrapper {
		flex: 1;
	}
	
	.exercise-name {
		font-size: 38rpx;
		font-weight: bold;
	}
	
	/* 进度显示 */
	.exercise-progress {
		flex-direction: row;
		align-items: center;
		margin-top: 10rpx;
		display: none;
	}
	
	.exercise-card.collapsed .exercise-progress {
		display: flex;
	}
	
	.exercise-sets-count {
		font-size: 28rpx;
		color: #666666;
		margin-right: 16rpx;
	}
	
	.exercise-dots {
		flex-direction: row;
	}
	
	.dot {
		width: 16rpx;
		height: 16rpx;
		border-radius: 8rpx;
		background-color: #dddddd;
		margin-right: 4rpx;
	}
	
	.dot.completed {
		background-color: #0A84FF;
	}
	
	.exercise-actions {
		flex-direction: row;
	}
	
	.icon-button {
		padding: 10rpx;
		margin-left: 20rpx;
		width: 60rpx;
		height: 60rpx;
		align-items: center;
		justify-content: center;
	}
	
	.icon {
		font-size: 36rpx;
		color: #666666;
	}
	
	/* 可折叠内容 */
	.collapsible-content {
		max-height: 2000rpx;
		overflow: hidden;
		transition-property: max-height;
		transition-duration: 0.3s;
	}
	
	.exercise-card.collapsed .collapsible-content {
		max-height: 0rpx;
	}
	
	/* 组列表样式 */
	.set-list {
		border-top-width: 1px;
		border-top-color: #eeeeee;
		padding-top: 20rpx;
		margin-top: 10rpx;
	}
	
	.set-list-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 16rpx;
		padding: 0 10rpx;
	}
	
	.set-list-title {
		font-weight: bold;
		color: #666666;
		font-size: 30rpx;
	}
	
	.unit-toggle {
		flex-direction: row;
		background-color: #f0f0f0;
		border-radius: 8rpx;
		overflow: hidden;
		height: 50rpx;
	}
	
	.unit-toggle-btn {
		padding: 0;
		width: 80rpx;
		align-items: center;
		justify-content: center;
	}
	
	.unit-toggle-btn.active {
		background-color: #333333;
	}
	
	.unit-text {
		color: #666666;
		font-size: 26rpx;
		font-weight: bold;
		text-align: center;
	}
	
	.active-text {
		color: #ffffff;
	}
	
	/* 组行样式 */
	.set-row {
		flex-direction: row;
		padding: 16rpx 0;
		border-bottom-width: 1px;
		border-bottom-color: #f5f5f5;
		align-items: center;
		justify-content: space-between;
	}
	
	.set-header {
		padding-bottom: 10rpx;
	}
	
	.set-header-text {
		color: #999999;
		font-size: 24rpx;
		font-weight: bold;
	}
	
	.set-number-col {
		width: 80rpx;
		color: #666666;
		font-weight: bold;
		text-align: center;
		padding-left: 10rpx;
	}
	
	.set-weight-col, .set-reps-col {
		width: 160rpx;
		padding: 0 20rpx;
	}
	
	.set-input {
		background-color: #ffffff;
		border-width: 1px;
		border-color: #dddddd;
		border-radius: 10rpx;
		padding: 12rpx 8rpx;
		text-align: center;
		height: 76rpx;
		font-size: 34rpx;
		font-weight: bold;
		color: #333333;
	}
	
	.set-complete-col {
		width: 90rpx;
		align-items: center;
		justify-content: center;
		padding: 0 10rpx;
	}
	
	.set-actions-col {
		width: 90rpx;
		align-items: center;
		justify-content: center;
		padding-right: 10rpx;
	}
	
	.set-actions-btn {
		padding: 12rpx;
		width: 80rpx;
		height: 80rpx;
		align-items: center;
		justify-content: center;
		background-color: rgba(0,0,0,0.03);
		border-radius: 8rpx;
	}
	
	/* 添加组按钮 */
	.add-set {
		padding: 20rpx;
		background-color: #f9f9f9;
		border-width: 1px;
		border-style: dashed;
		border-color: #dddddd;
		border-radius: 12rpx;
		margin-top: 20rpx;
		align-items: center;
	}
	
	.add-set-text {
		color: #666666;
		font-size: 28rpx;
	}
	
	/* 备注 */
	.exercise-notes {
		margin-top: 20rpx;
		padding: 20rpx;
		background-color: #f9f9f9;
		border-radius: 12rpx;
	}
	
	.notes-text {
		font-size: 28rpx;
		color: #666666;
	}
	
	/* 添加动作按钮 */
	.add-exercise {
		padding: 30rpx;
		background-color: #ffffff;
		border-radius: 20rpx;
		align-items: center;
		margin-bottom: 160rpx; /* 为底部导航留出足够空间 */
	}
	
	.add-exercise-text {
		color: #0A84FF;
		font-size: 32rpx;
		font-weight: bold;
	}
	
	/* 底部导航 */
	.bottom-nav {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		flex-direction: row;
		background-color: #ffffff;
		box-shadow: 0 -2rpx 10rpx rgba(0, 0, 0, 0.1);
		z-index: 100;
		height: 130rpx;
		padding-bottom: env(safe-area-inset-bottom);
	}
	
	.bottom-nav-btn {
		flex: 1;
		padding: 20rpx 0;
		align-items: center;
		justify-content: center;
	}
	
	.bottom-icon {
		font-size: 44rpx;
		margin-bottom: 6rpx;
	}
	
	.bottom-text {
		font-size: 24rpx;
		color: #666666;
	}
	
	.bottom-nav-btn.save {
		background-color: #0A84FF;
	}
	
	.bottom-nav-btn.save .bottom-icon {
		color: #ffffff;
	}
	
	.bottom-nav-btn.save .bottom-text {
		color: #ffffff;
	}
	
	.bottom-nav-btn.delete .bottom-text {
		color: #FF3B30;
	}
	
	.bottom-nav-btn.delete .bottom-icon {
		color: #FF3B30;
	}
	
	/* 自定义复选框 */
	.custom-checkbox {
		width: 50rpx;
		height: 50rpx;
		border-radius: 8rpx;
		border-width: 2rpx;
		border-color: #dddddd;
		align-items: center;
		justify-content: center;
		background-color: #ffffff;
	}
	
	.checkbox-inner {
		width: 50rpx;
		height: 50rpx;
		border-radius: 6rpx;
		background-color: #0A84FF;
		align-items: center;
		justify-content: center;
	}
	
	.checkbox-icon {
		color: #ffffff;
		font-size: 32rpx;
		font-weight: bold;
	}
	
	/* 操作按钮样式 */
	.icon {
		font-size: 40rpx;
		color: #666666;
	}
	
	.set-actions-btn {
		padding: 12rpx;
		width: 80rpx;
		height: 80rpx;
		align-items: center;
		justify-content: center;
		background-color: rgba(0,0,0,0.03);
		border-radius: 8rpx;
	}
</style> 