<template>
	<view class="container">
		<!-- 页面标题 -->
		<view class="header">
			<text class="header-title">今日训练</text>
		</view>
		
		<!-- 训练卡片 -->
		<view class="training-card">
			<view class="training-info">
				<text class="training-title">{{ todayTraining.title }}</text>
				<view class="training-meta">
					<text class="training-meta-item">{{ todayTraining.type === 0 ? '官方计划' : '个人模版' }}</text>
					<view class="training-meta-item-group">
						<text class="training-meta-icon">动作</text>
						<text class="training-meta-value">{{ todayTraining.exercises ? todayTraining.exercises.length : 0 }}</text>
					</view>
					<view class="training-meta-item-group">
						<text class="training-meta-icon">组数</text>
						<text class="training-meta-value">{{ getTotalSets(todayTraining) }}</text>
					</view>
				</view>
			</view>
			<view class="go-button" @click="startTraining(todayTraining)">
				<text class="go-text">GO!</text>
			</view>
		</view>
		
		<!-- 训练类型导航 -->
		<view class="nav-tabs">
			<view class="tab" :class="{ active: activeTab === 0 }" @click="changeTab(0)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 0 }">官方计划</text>
			</view>
			<view class="tab" :class="{ active: activeTab === 1 }" @click="changeTab(1)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 1 }">个人模版</text>
			</view>
			<view class="tab" :class="{ active: activeTab === 2 }" @click="changeTab(2)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 2 }">个人计划(Beta)</text>
			</view>
		</view>
		
		<!-- 训练标签 -->
		<scroll-view scroll-x="true" show-scrollbar="false" class="tags-scroll">
			<view class="training-tags">
				<view class="tag" v-for="(tag, index) in tags" :key="index" :class="{ active: activeTag === index }" @click="selectTag(index)">
					<text class="tag-text" :class="{ 'active-text': activeTag === index }">{{ tag }}</text>
				</view>
			</view>
		</scroll-view>
		
		<!-- 训练计划卡片 -->
		<list class="plan-list" show-scrollbar="false" alwaysScrollableVertical="true">
			<!-- 加载中提示 -->
			<cell v-if="loading">
				<view class="loading-container">
					<text class="loading-text">加载中...</text>
				</view>
			</cell>
			
			<!-- 错误提示 -->
			<cell v-else-if="error">
				<view class="error-container">
					<text class="error-text">{{ error }}</text>
					<view class="error-button" @click="fetchTrainingPlans">
						<text class="error-button-text">重试</text>
					</view>
				</view>
			</cell>
			
			<!-- 训练计划列表 -->
			<cell v-else v-for="(plan, index) in filteredPlans" :key="index">
				<view class="plan-card">
					<image class="plan-image" :src="plan.image || '/static/default-plan.png'" resize="cover"></image>
					<view class="plan-content">
						<text class="plan-title">{{ plan.title }}</text>
						<text class="plan-desc">{{ plan.description }}</text>
						<view class="plan-footer">
							<view class="plan-stats">
								<view class="plan-stats-item">
									<text class="plan-stats-label">动作</text>
									<text class="plan-stats-value">{{ plan.exercises ? plan.exercises.length : 0 }}</text>
								</view>
								<view class="plan-stats-item">
									<text class="plan-stats-label">组数</text>
									<text class="plan-stats-value">{{ getTotalSets(plan) }}</text>
								</view>
								<view class="plan-stats-item">
									<text class="plan-stats-label">预计</text>
									<text class="plan-stats-value">{{ plan.estimatedTime || '--' }}分钟</text>
								</view>
							</view>
							<view class="plan-start-button" @click.stop="startTraining(plan)">
								<text class="plan-start-text">开始</text>
							</view>
						</view>
					</view>
				</view>
			</cell>
			
			<!-- 没有数据时的提示 -->
			<cell v-if="!loading && !error && filteredPlans.length === 0">
				<view class="no-data">
					<text class="no-data-text">没有找到训练计划</text>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	import TrainingService from '../../utils/services/TrainingService.js';
	
	export default {
		data() {
			return {
				activeTab: 0,
				activeTag: 0,
				showOldPlans: true,
				tags: ['减脂塑形', '部位专攻', '增肌·男', '增肌·女', '力量举', '旧计划'],
				trainingPlans: [],
				loading: true,
				error: null,
				todayTraining: {} // 新增：用于存储今日训练计划
			}
		},
		onLoad() {
			// 初始化训练服务
			TrainingService.init();
			
			// 获取训练计划列表
			this.fetchTrainingPlans();
			this.fetchTodayTraining(); // 获取今日训练计划
		},
		computed: {
			filteredPlans() {
				// 根据当前选择的标签和类型过滤计划
				if (!this.trainingPlans || this.trainingPlans.length === 0) {
					return [];
				}
				
				// 根据当前选择的类型和标签过滤
				return this.trainingPlans.filter(plan => {
					// 先按类型过滤
					if (this.activeTab === 0 && plan.type !== 0) return false; // 官方计划
					if (this.activeTab === 1 && plan.type !== 1) return false; // 个人模版
					if (this.activeTab === 2 && plan.type !== 2) return false; // 个人计划
					
					// 再按标签过滤
					if (this.activeTab === 0) { // 官方计划
						// 特殊处理旧计划标签
						if (this.activeTag === 5) {
							return plan.isOld === true;
						} else {
							return plan.tag === this.activeTag && (plan.isOld !== true);
						}
					}
					
					return true;
				});
			}
		},
		
		methods: {
			changeTab(index) {
				this.activeTab = index;
			},
			
			selectTag(index) {
				this.activeTag = index;
				
				// 旧计划标签单独处理
				this.showOldPlans = index === 5;
			},
			
			viewPlan(plan) {
				// TODO: 查看训练计划详情
				console.log('查看计划: ', plan.title);
			},
			
			// 获取训练计划列表
			fetchTrainingPlans() {
				try {
					this.loading = true;
					this.trainingPlans = TrainingService.getTrainingPlans();
					this.loading = false;
				} catch (err) {
					this.error = '获取训练计划失败';
					this.loading = false;
					console.error('获取训练计划出错:', err);
				}
			},

			// 获取今日训练计划
			fetchTodayTraining() {
				try {
					this.todayTraining = TrainingService.getTodayTrainingPlan();
				} catch (err) {
					console.error('获取今日训练计划出错:', err);
				}
			},

			// 计算总组数
			getTotalSets(plan) {
				if (!plan || !plan.exercises) return 0;
				
				let totalSets = 0;
				plan.exercises.forEach(exercise => {
					if (exercise.sets && Array.isArray(exercise.sets)) {
						totalSets += exercise.sets.length;
					}
				});
				return totalSets;
			},
			
			// 开始训练
			startTraining(trainingItem) {
				// 获取完整的训练计划
				const trainingPlan = TrainingService.getTrainingPlanById(trainingItem.id);
				if (!trainingPlan) {
					uni.showToast({
						title: '训练计划不存在',
						icon: 'none'
					});
					return;
				}
				
				// 开始训练，创建训练会话
				const trainingSession = TrainingService.startTraining(trainingPlan);
				
				// 跳转到训练会话页面
				uni.navigateTo({
					url: `/pages/training-session/training-session?id=${trainingSession.id}`
				});
			}
		}
	}
</script>

<style>
	.container {
		flex: 1;
		flex-direction: column;
		background-color: #f5f5f5;
		padding: 20rpx;
	}
	
	.header {
		margin-top: 20rpx;
		margin-bottom: 30rpx;
		padding-left: 20rpx;
	}
	
	.header-title {
		font-size: 44rpx;
		font-weight: bold;
		color: #333;
	}
	
	.training-card {
		background-color: #ffffff;
		border-radius: 16rpx;
		padding: 30rpx;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 30rpx;
	}
	
	.training-info {
		flex: 1;
	}
	
	.training-title {
		font-size: 50rpx;
		font-weight: bold;
		color: #0A84FF;
		margin-bottom: 20rpx;
	}
	
	.training-meta {
		flex-direction: row;
		align-items: center;
	}
	
	.training-meta-item {
		color: #999;
		font-size: 28rpx;
		margin-right: 30rpx;
	}
	
	.training-meta-item-group {
		flex-direction: row;
		align-items: center;
		margin-right: 30rpx;
	}
	
	.training-meta-icon {
		color: #999;
		font-size: 28rpx;
		margin-right: 10rpx;
	}
	
	.training-meta-value {
		color: #333;
		font-size: 28rpx;
		font-weight: bold;
	}
	
	.go-button {
		width: 120rpx;
		height: 120rpx;
		background-color: #333;
		border-radius: 60rpx;
		align-items: center;
		justify-content: center;
	}
	
	.go-text {
		color: #ffffff;
		font-size: 36rpx;
		font-weight: bold;
	}
	
	.nav-tabs {
		flex-direction: row;
		margin-bottom: 20rpx;
	}
	
	.tab {
		background-color: #f0f0f0;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
		margin-right: 20rpx;
	}
	
	.tab.active {
		background-color: #333;
	}
	
	.tab-text {
		color: #666;
		font-size: 28rpx;
	}
	
	.active-text {
		color: #ffffff;
	}
	
	.tags-scroll {
		margin-bottom: 20rpx;
	}
	
	.training-tags {
		flex-direction: row;
		padding: 10rpx 0;
	}
	
	.tag {
		background-color: #f0f0f0;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
		margin-right: 20rpx;
	}
	
	.tag.active {
		background-color: #333;
	}
	
	.tag-text {
		color: #666;
		font-size: 28rpx;
	}
	
	.plan-list {
		flex: 1;
	}
	
	.plan-card {
		background-color: #ffffff;
		border-radius: 16rpx;
		margin-bottom: 30rpx;
		flex-direction: row;
		overflow: hidden;
	}
	
	.plan-image {
		width: 260rpx;
		height: 220rpx;
		background-color: #FF6B81;
	}
	
	.plan-content {
		flex: 1;
		padding: 30rpx;
		justify-content: center;
	}
	
	.plan-title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.plan-desc {
		font-size: 28rpx;
		color: #999;
	}
	
	.plan-footer {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-top: 20rpx;
	}
	
	.plan-stats {
		flex-direction: row;
		align-items: center;
	}
	
	.plan-stats-item {
		margin-right: 30rpx;
	}
	
	.plan-stats-label {
		color: #999;
		font-size: 28rpx;
	}
	
	.plan-stats-value {
		color: #333;
		font-size: 28rpx;
		font-weight: bold;
	}
	
	.plan-start-button {
		background-color: #0A84FF;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
	}
	
	.plan-start-text {
		color: #ffffff;
		font-size: 32rpx;
		font-weight: bold;
	}
	
	.section-title {
		align-items: center;
		padding: 40rpx 0;
	}
	
	.section-text {
		font-size: 28rpx;
		color: #999;
		text-align: center;
	}
	
	.header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 20rpx 30rpx;
	}

	.loading-container {
		align-items: center;
		padding: 40rpx 0;
	}
	
	.loading-text {
		font-size: 28rpx;
		color: #999;
	}
	
	.error-container {
		align-items: center;
		padding: 40rpx 0;
	}
	
	.error-text {
		font-size: 28rpx;
		color: #999;
		margin-bottom: 20rpx;
	}
	
	.error-button {
		background-color: #0A84FF;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
	}
	
	.error-button-text {
		color: #ffffff;
		font-size: 32rpx;
		font-weight: bold;
	}
	
	.empty-container {
		align-items: center;
		padding: 40rpx 0;
	}
	
	.empty-text {
		font-size: 28rpx;
		color: #999;
	}
</style> 