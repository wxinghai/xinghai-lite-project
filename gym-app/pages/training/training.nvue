<template>
	<view class="container">
		<!-- 页面标题 -->
		<view class="header">
			<text class="header-title">今日训练</text>
			<!-- 测试按钮 -->
			<view class="header-buttons">
				<view class="test-floating" @click="testFloatingTimer">
					<text class="test-floating-text">测试悬浮窗</text>
				</view>
				<view class="test-floating" @click="testRestTimer">
					<text class="test-floating-text">测试休息</text>
				</view>
			</view>
		</view>
		
		<!-- 训练卡片 -->
		<view class="training-card">
			<view class="training-info">
				<text class="training-title">70%腿训</text>
				<view class="training-meta">
					<text class="training-meta-item">个人模版</text>
					<view class="training-meta-item-group">
						<text class="training-meta-icon">动作</text>
						<text class="training-meta-value">3</text>
					</view>
					<view class="training-meta-item-group">
						<text class="training-meta-icon">组数</text>
						<text class="training-meta-value">16</text>
					</view>
				</view>
			</view>
			<view class="go-button" @click="startTraining">
				<text class="go-text">GO!</text>
			</view>
		</view>
		
		<!-- 训练类型导航 -->
		<view class="nav-tabs">
			<view class="tab" :class="{ active: activeTab === 0 }" @click="changeTab(0)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 0 }">官方计划</text>
			</view>
			<view class="tab" :class="{ active: activeTab === 1 }" @click="changeTab(1)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 1 }">个人模版</text>
			</view>
			<view class="tab" :class="{ active: activeTab === 2 }" @click="changeTab(2)">
				<text class="tab-text" :class="{ 'active-text': activeTab === 2 }">个人计划(Beta)</text>
			</view>
		</view>
		
		<!-- 训练标签 -->
		<scroll-view scroll-x="true" show-scrollbar="false" class="tags-scroll">
			<view class="training-tags">
				<view class="tag" v-for="(tag, index) in tags" :key="index" :class="{ active: activeTag === index }" @click="selectTag(index)">
					<text class="tag-text" :class="{ 'active-text': activeTag === index }">{{ tag }}</text>
				</view>
			</view>
		</scroll-view>
		
		<!-- 训练计划卡片 -->
		<list class="plan-list" show-scrollbar="false" alwaysScrollableVertical="true">
			<cell v-for="(plan, index) in filteredPlans" :key="index">
				<view class="plan-card" @click="viewPlan(plan)">
					<image class="plan-image" :src="plan.image || '/static/default-plan.png'" resize="cover"></image>
					<view class="plan-content">
						<text class="plan-title">{{ plan.title }}</text>
						<text class="plan-desc">{{ plan.description }}</text>
					</view>
				</view>
			</cell>
			
			<cell v-if="showOldPlans">
				<view class="section-title">
					<text class="section-text">旧的减脂计划</text>
				</view>
			</cell>
			
			<cell v-for="(plan, index) in oldPlans" :key="'old-'+index" v-if="showOldPlans">
				<view class="plan-card" @click="viewPlan(plan)">
					<image class="plan-image" :src="plan.image || '/static/default-plan.png'" resize="cover"></image>
					<view class="plan-content">
						<text class="plan-title">{{ plan.title }}</text>
						<text class="plan-desc">{{ plan.description }}</text>
					</view>
				</view>
			</cell>
		</list>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				activeTab: 0,
				activeTag: 0,
				showOldPlans: true,
				tags: ['减脂塑形', '部位专攻', '增肌·男', '增肌·女', '力量举', '旧计划'],
				// 训练会话状态
				trainingSession: {
					timeElapsed: 0,    // 已经过的时间（秒）
					totalTime: 3600,   // 会话总时间（秒）
					isRunning: false,  // 是否正在进行
					exercisesDone: 0,  // 已完成动作数
					totalExercises: 3  // 总动作数
				},
				// 悬浮窗状态
				floatingTimerVisible: false,
				// 模拟训练计时器
				sessionTimerId: null,
				// 休息计时器状态
				restTimerVisible: false,
				// 休息计时最小化状态
				restTimerMinimized: false,
				plans: [
					{
						title: '男生减脂塑形捷径',
						description: '解决肚子大、肌肉小、没有型！',
						image: '',
						type: 0, // 官方计划
						tag: 0, // 减脂塑形
					},
					{
						title: '女生减脂塑形捷径',
						description: '灭绝腰粗、腿粗副乳、塌扁平臀！',
						image: '',
						type: 0,
						tag: 0,
					},
					{
						title: '肩膀胸背塑形',
						description: '一个月发现明显效果，肩膀更宽！',
						image: '',
						type: 0,
						tag: 1, // 部位专攻
					},
					{
						title: '腹肌专攻特训',
						description: '系统高效，腹肌成型必备',
						image: '',
						type: 0,
						tag: 1,
					},
					{
						title: '男生增肌训练',
						description: '高效增肌，避免困扰，实现目标',
						image: '',
						type: 0,
						tag: 2, // 增肌·男
					},
					{
						title: '女生腹背臀增肌',
						description: '高效曲线塑造，增强体能！',
						image: '',
						type: 0,
						tag: 3, // 增肌·女
					},
					{
						title: '卧推突破训练营',
						description: '专注卧推突破的详细进阶',
						image: '',
						type: 0,
						tag: 4, // 力量举
					},
					{
						title: '硬拉速提升',
						description: '4周提高硬拉的针对训练',
						image: '',
						type: 0,
						tag: 4,
					},
				],
				oldPlans: [
					{
						title: '旧版减脂训练',
						description: '旧版减脂训练课表（已不再维护）',
						image: '',
						type: 0,
						tag: 5, // 旧计划
					}
				]
			}
		},
		
		onLoad() {
			// 监听悬浮窗点击事件
			uni.$on('floating-timer-clicked', this.onFloatingTimerClicked);
			// 监听休息计时器事件
			uni.$on('rest-timer-completed', this.onRestTimerCompleted);
			uni.$on('rest-timer-minimize', this.onRestTimerMinimize);
		},
		
		onReady() {
			// 等待页面加载完成后初始化subNVue
			// 注意：subNVue需要在页面准备好之后才能获取
			setTimeout(() => {
				// 预加载subNVue组件，但不显示
				const floatingTimer = uni.getSubNVueById('floatingTimer');
				const restTimer = uni.getSubNVueById('restTimer');
				
				if (floatingTimer) {
					console.log('成功获取悬浮窗组件');
				} else {
					console.error('无法获取悬浮窗组件');
				}
				
				if (restTimer) {
					console.log('成功获取休息计时器组件');
				} else {
					console.error('无法获取休息计时器组件');
				}
			}, 300);
		},
		
		onUnload() {
			// 清理事件监听
			uni.$off('floating-timer-clicked', this.onFloatingTimerClicked);
			uni.$off('rest-timer-completed', this.onRestTimerCompleted);
			uni.$off('rest-timer-minimize', this.onRestTimerMinimize);
			// 停止计时器
			this.stopSessionTimer();
		},
		
		computed: {
			filteredPlans() {
				// 根据当前选择的标签过滤计划
				if (this.activeTab === 0) { // 官方计划
					return this.plans.filter(plan => 
						plan.type === 0 && plan.tag === this.activeTag && plan.tag !== 5
					);
				} else if (this.activeTab === 1) { // 个人模版
					return [];
				} else { // 个人计划(Beta)
					return [];
				}
			}
		},
		
		methods: {
			changeTab(index) {
				this.activeTab = index;
			},
			
			selectTag(index) {
				this.activeTag = index;
				
				// 旧计划标签单独处理
				this.showOldPlans = index === 5;
			},
			
			viewPlan(plan) {
				// TODO: 查看训练计划详情
				console.log('查看计划: ', plan.title);
			},
			
			// 测试悬浮窗功能
			testFloatingTimer() {
				if (this.floatingTimerVisible) {
					this.hideFloatingTimer();
					this.stopSessionTimer();
				} else {
					this.showFloatingTimer();
					this.startSessionTimer();
				}
			},
			
			// 开始训练会话
			startTraining() {
				// 简化版：直接显示悬浮窗
				this.showFloatingTimer();
				this.startSessionTimer();
				
				// 实际使用中可能需要跳转到训练会话页面
				// uni.navigateTo({
				//     url: '/pages/training-session/training-session'
				// });
			},
			
			// 显示悬浮计时器
			showFloatingTimer() {
				try {
					const subNVue = uni.getSubNVueById('floatingTimer');
					if (subNVue) {
						subNVue.show('slide-in-right', 300, () => {
							// 发送初始状态
							uni.$emit('update-floating-timer', {
								timeElapsed: this.trainingSession.timeElapsed,
								totalTime: this.trainingSession.totalTime,
								isRunning: true
							});
							this.floatingTimerVisible = true;
						});
					} else {
						// 显示错误信息
						uni.showToast({
							title: '悬浮窗组件未找到，请重启应用',
							icon: 'none',
							duration: 3000
						});
						console.error('悬浮窗组件未找到 - floatingTimer');
					}
				} catch(err) {
					console.error('显示悬浮窗错误:', err);
					// 显示错误信息
					uni.showToast({
						title: '显示悬浮窗出错，请重启应用',
						icon: 'none',
						duration: 3000
					});
				}
			},
			
			// 隐藏悬浮计时器
			hideFloatingTimer() {
				const subNVue = uni.getSubNVueById('floatingTimer');
				if (subNVue) {
					subNVue.hide('slide-out-right', 300);
					this.floatingTimerVisible = false;
				}
			},
			
			// 处理悬浮窗点击事件
			onFloatingTimerClicked() {
				// 这里可以处理回到训练会话页面的逻辑
				console.log('悬浮窗被点击，回到训练会话页面');
				
				// 实际使用中可能需要跳转或恢复训练会话页面
				// uni.navigateTo({
				//     url: '/pages/training-session/training-session'
				// });
				
				// 为演示目的，简单地暂停计时器
				this.stopSessionTimer();
			},
			
			// 启动会话计时器（模拟训练进行）
			startSessionTimer() {
				// 停止任何现有计时器
				this.stopSessionTimer();
				
				// 如果已有计时，从当前时间继续
				const startTime = Date.now() - this.trainingSession.timeElapsed * 1000;
				this.trainingSession.isRunning = true;
				
				// 每秒更新一次时间
				this.sessionTimerId = setInterval(() => {
					// 更新经过的时间
					const elapsed = Math.floor((Date.now() - startTime) / 1000);
					this.trainingSession.timeElapsed = elapsed;
					
					// 向悬浮窗发送更新
					if (this.floatingTimerVisible) {
						uni.$emit('update-floating-timer', {
							timeElapsed: this.trainingSession.timeElapsed,
							isRunning: this.trainingSession.isRunning
						});
					}
					
					// 示例：每30秒增加一个已完成的动作
					if (elapsed > 0 && elapsed % 30 === 0) {
						if (this.trainingSession.exercisesDone < this.trainingSession.totalExercises) {
							this.trainingSession.exercisesDone++;
							// 更新悬浮窗进度
							uni.$emit('update-floating-timer', {
								totalTime: this.trainingSession.totalTime,
								isRunning: this.trainingSession.isRunning
							});
						}
					}
				}, 1000);
			},
			
			// 停止会话计时器
			stopSessionTimer() {
				if (this.sessionTimerId) {
					clearInterval(this.sessionTimerId);
					this.sessionTimerId = null;
					this.trainingSession.isRunning = false;
					
					// 通知悬浮窗停止计时
					if (this.floatingTimerVisible) {
						uni.$emit('update-floating-timer', {
							isRunning: false
						});
					}
				}
			},
			
			// 显示休息计时器
			showRestTimer(seconds = 60) {
				try {
					const subNVue = uni.getSubNVueById('restTimer');
					if (subNVue) {
						// 显示休息计时器
						subNVue.show('fade-in', 300, () => {
							this.restTimerVisible = true;
							this.restTimerMinimized = false;
							
							// 可以在这里设置初始时间等
							// TODO: 实现真正的接口调用
						});
					} else {
						// 显示错误信息
						uni.showToast({
							title: '休息计时器组件未找到，请重启应用',
							icon: 'none',
							duration: 3000
						});
						console.error('休息计时器组件未找到 - restTimer');
					}
				} catch(err) {
					console.error('显示休息计时器错误:', err);
					// 显示错误信息
					uni.showToast({
						title: '显示休息计时器出错，请重启应用',
						icon: 'none',
						duration: 3000
					});
				}
			},
			
			// 处理休息计时器完成事件
			onRestTimerCompleted() {
				this.restTimerVisible = false;
				this.restTimerMinimized = false;
				
				// 这里可以添加休息结束后的逻辑
				uni.showToast({
					title: '休息时间结束',
					icon: 'none'
				});
			},
			
			// 处理休息计时器最小化事件
			onRestTimerMinimize(data) {
				this.restTimerVisible = true;
				this.restTimerMinimized = true;
				
				// 这里可以实现最小化显示休息计时器
				// 在实际应用中，可能需要创建一个小型悬浮窗显示剩余时间
				uni.showToast({
					title: '休息计时器已最小化',
					icon: 'none'
				});
			},
			
			// 测试休息计时器
			testRestTimer() {
				this.showRestTimer(60); // 显示60秒休息计时器
			}
		}
	}
</script>

<style>
	.container {
		flex: 1;
		flex-direction: column;
		background-color: #f5f5f5;
		padding: 20rpx;
	}
	
	.header {
		margin-top: 20rpx;
		margin-bottom: 30rpx;
		padding-left: 20rpx;
	}
	
	.header-title {
		font-size: 44rpx;
		font-weight: bold;
		color: #333;
	}
	
	.training-card {
		background-color: #ffffff;
		border-radius: 16rpx;
		padding: 30rpx;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 30rpx;
	}
	
	.training-info {
		flex: 1;
	}
	
	.training-title {
		font-size: 50rpx;
		font-weight: bold;
		color: #0A84FF;
		margin-bottom: 20rpx;
	}
	
	.training-meta {
		flex-direction: row;
		align-items: center;
	}
	
	.training-meta-item {
		color: #999;
		font-size: 28rpx;
		margin-right: 30rpx;
	}
	
	.training-meta-item-group {
		flex-direction: row;
		align-items: center;
		margin-right: 30rpx;
	}
	
	.training-meta-icon {
		color: #999;
		font-size: 28rpx;
		margin-right: 10rpx;
	}
	
	.training-meta-value {
		color: #333;
		font-size: 28rpx;
		font-weight: bold;
	}
	
	.go-button {
		width: 120rpx;
		height: 120rpx;
		background-color: #333;
		border-radius: 60rpx;
		align-items: center;
		justify-content: center;
	}
	
	.go-text {
		color: #ffffff;
		font-size: 36rpx;
		font-weight: bold;
	}
	
	.nav-tabs {
		flex-direction: row;
		margin-bottom: 20rpx;
	}
	
	.tab {
		background-color: #f0f0f0;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
		margin-right: 20rpx;
	}
	
	.tab.active {
		background-color: #333;
	}
	
	.tab-text {
		color: #666;
		font-size: 28rpx;
	}
	
	.active-text {
		color: #ffffff;
	}
	
	.tags-scroll {
		margin-bottom: 20rpx;
	}
	
	.training-tags {
		flex-direction: row;
		padding: 10rpx 0;
	}
	
	.tag {
		background-color: #f0f0f0;
		padding: 16rpx 30rpx;
		border-radius: 40rpx;
		margin-right: 20rpx;
	}
	
	.tag.active {
		background-color: #333;
	}
	
	.tag-text {
		color: #666;
		font-size: 28rpx;
	}
	
	.plan-list {
		flex: 1;
	}
	
	.plan-card {
		background-color: #ffffff;
		border-radius: 16rpx;
		margin-bottom: 30rpx;
		flex-direction: row;
		overflow: hidden;
	}
	
	.plan-image {
		width: 260rpx;
		height: 220rpx;
		background-color: #FF6B81;
	}
	
	.plan-content {
		flex: 1;
		padding: 30rpx;
		justify-content: center;
	}
	
	.plan-title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
	}
	
	.plan-desc {
		font-size: 28rpx;
		color: #999;
	}
	
	.section-title {
		align-items: center;
		padding: 40rpx 0;
	}
	
	.section-text {
		font-size: 28rpx;
		color: #999;
		text-align: center;
	}
	
	/* 添加测试按钮样式 */
	.header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 20rpx 30rpx;
	}
	
	.header-buttons {
		flex-direction: row;
	}
	
	.test-floating {
		background-color: #0A84FF;
		border-radius: 10rpx;
		padding: 10rpx 20rpx;
		margin-left: 10rpx;
	}
	
	.test-floating-text {
		color: #FFFFFF;
		font-size: 28rpx;
	}
</style> 